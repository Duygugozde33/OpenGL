Grafik 
51 e kadar oku

openGl Guide
Gl Graphics Libraries

##Chapter 1
#introduction

Basic Draw Square
#include <GL/gl.h>
#include <GL/glaux.h>

int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);
   glBegin(GL_POLYGON);
      glVertex2f(-0.5, -0.5);
      glVertex2f(-0.5, 0.5);
      glVertex2f(0.5, 0.5);
      glVertex2f(0.5, -0.5);
   glEnd();
   glFlush();

   Sleep(3000);
   return 0;
}

#Chapter 2
##Drawing geometric objects

Points
Lines
Polygons


GL_POINTS
GL_LINES
GL_POLYGON
GL_TRIANGLES
GL_QUADS
GL_LINE_STRIP
GL_LINE_LOOP
GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN
GL_QUAD_STRIP

glPointSize(5);
glLineWidth(5);
GL_POINT_SIZE_RANGE with glGetFloatv() //buffer
GL_LINE_WIDTH_RANGE with glGetFloatv() //buffer

glLineStipple(1, 0x3F07);
glEnable(GL_LINE_STIPPLE);

#define PI 3.1415926535897;
GLint circle_points = 100;
glBegin(GL_LINE_LOOP);
for (i = 0; i < circle_points; i++) {
 angle = 2*PI*i/circle_points;
 glVertex2f(cos(angle), sin(angle));
}
glEnd();

##Renkleri guzel
 glBegin(GL_LINE_LOOP);
      glVertex2f(-0.5, -0.5);
      glColor3f(0.3, 0.4, 0.5);
      glVertex2f(-0.5, 0.5);
      glColor3f(0.4, 0.5, 0.6);
      glVertex2f(0.5, 0.5);
      glColor3f(0.5, 0.6, 0.7);
      glVertex2f(0.5, -0.5);
   glEnd();

#include <math.h>
GLint circle_points = 180;
float i;
float j;
float k;
float angle;
glBegin(GL_LINE_LOOP);
for ( i = 0; i < circle_points; i++) {
	for ( j = 0; j < circle_points; j++) {
		for ( k = 0; k < circle_points; k++) {
		glColor3f(k, j, i);
		angle = 2*3.1415926535897*i/circle_points;
		glVertex2f(cos(angle), sin(angle));
		}
	}
}

#define PI 3.1415926535897;
GLint circle_points = 100;
glBegin(GL_LINE_LOOP);
for (i = 0; i < circle_points; i++) {
 angle = 2*PI*i/circle_points;
 glVertex2f(cos(angle), sin(angle));
}
glEnd();


##FRONT_AND_BACK
GL_FRONT_AND_BACK, GL_FRONT, or GL_BACK; mode can be GL_POINT, GL_LINE, or GL_FILL
glPolygonMode(GL_FRONT, GL_FILL);
glPolygonMode(GL_BACK, GL_LINE);

glFrontFace(GLenum mode);
GL_CCW //counterclockwise //default
GL_CW  //clockwise

glCullFace(GL_FRONT_AND_BACK);
glEnable(GL_CULL_FACE);

glPolygonStipple()

#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glaux.h>

void CALLBACK display(void)
{
GLubyte fly[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08};
GLubyte halftone[] = {
        0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55};
glClear (GL_COLOR_BUFFER_BIT);
glColor3f (1.0, 1.0, 1.0);
glRectf (25.0, 25.0, 125.0, 125.0);
glEnable (GL_POLYGON_STIPPLE);
glPolygonStipple (fly);
glRectf (125.0, 25.0, 225.0, 125.0);
glPolygonStipple (halftone);
glRectf (225.0, 25.0, 325.0, 125.0);
glDisable (GL_POLYGON_STIPPLE);
glFlush ();
}


void myinit (void)
{
glClearColor (0.0, 0.0, 0.0, 0.0);
glShadeModel (GL_FLAT);
}

int main(int argc, char** argv)
{
    auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
auxInitPosition (0, 0, 350, 150);
auxInitWindow (argv[0]);
myinit ();

auxMainLoop(display);  

}

#include <GL/gl.h>
#include <GL/glaux.h>
#include <math.h>
#define PI 3.1415926535897;
int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-6.0, 6.0, -6.0, 6.0, -1.0, 1.0);

glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
glBegin(GL_POLYGON);
glColor3f(1.0, 1.0, 0);
glEdgeFlag(GL_TRUE);
glVertex2f(0.0, 0.0);
glEdgeFlag(GL_FALSE);
glVertex2f(-3.0, 3.0);
glEdgeFlag(GL_TRUE);
glVertex2f(3.0, 3.0);

glEnd();
   glFlush();

   Sleep(3000);
   return 0;
}

//TRUE ise o noktadan cikan kenarlari cizdirir
//FALSE ise kapanir
>> A(0,0) , B(-3,3) , C(3,3)
//ilk hangi nokta tanimlaniyorsa kodda ondan baslayarak harflendirme
//A noktasi true B ye giden kenar cizildi
//B noktasi false C ye giden kenar cizilmedi
//C noktasi true A ya giden kenar cizildi

#include <GL/gl.h>
#include <GL/glaux.h>
#include <math.h>


int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-2.0, 2.0, -2.0, 2.0, -1.0, 1.0);
double X,Z;

X=0.525731112119133606;
Z=0.850650808352039932;

GLint i;

static GLfloat vdata[12][3] = {
{-X, 0.0, Z}, {X, 0.0, Z}, {-X, 0.0, -Z}, {X, 0.0, -Z},
{0.0, Z, X}, {0.0, Z, -X}, {0.0, -Z, X}, {0.0, -Z, -X},
{Z, X, 0.0}, {-Z, X, 0.0}, {Z, -X, 0.0}, {-Z, -X, 0.0}
};
static GLint tindices[20][3] = {
{0,4,1}, {0,9,4}, {9,5,4}, {4,5,8}, {4,8,1},
{8,10,1}, {8,3,10}, {5,3,8}, {5,2,3}, {2,7,3},
{7,10,3}, {7,6,10}, {7,11,6}, {11,0,6}, {0,1,6},
{6,1,10}, {9,0,11}, {9,11,2}, {9,2,5}, {7,2,11} };
for (i = 0; i < 20; i++) {
/* color information here */
//glColor3f((i+1)*0.15, 0.5, 0.5);
glBegin(GL_TRIANGLES);
glColor3f (1.0, 0.0, 0.0);
glVertex3fv(&vdata[tindices[i][0]][0]);
glColor3f (0.0, 1.0, 0.0);
glVertex3fv(&vdata[tindices[i][1]][0]);
glColor3f (0.0, 0.0, 1.0);
glVertex3fv(&vdata[tindices[i][2]][0]);
glEnd();
}
glFlush();

   Sleep(3000);
   return 0;
}

#include <GL/gl.h>
#include <GL/glaux.h>
#include <math.h>
void normalize(float v[3]) {
GLfloat d = sqrt(v[1]*v[1]+v[2]*v[2]+v[3]*v[3]);
if (d == 0.0) {
//error("zero length vector");
return;
}
v[1] /= d; v[2] /= d; v[3] /= d;
}
void normcrossprod(float v1[3], float v2[3], float out[3])
{

out[0] = v1[1]*v2[2] - v1[2]*v2[1];
out[1] = v1[2]*v2[0] - v1[0]*v2[2];
out[2] = v1[0]*v2[1] - v1[1]*v2[0];
normalize(out);
}

void myinit (void)
{
glClearColor (0.0, 0.0, 0.0, 0.0);
glShadeModel (GL_FLAT);
}

int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);
   myinit ();
   double X,Z;
   GLint i,j;
   GLfloat d1[3], d2[3], norm[3];
   X=0.525731112119133606;
   Z=0.850650808352039932;

static GLfloat vdata[12][3] = {
{-X, 0.0, Z}, {X, 0.0, Z}, {-X, 0.0, -Z}, {X, 0.0, -Z},
{0.0, Z, X}, {0.0, Z, -X}, {0.0, -Z, X}, {0.0, -Z, -X},
{Z, X, 0.0}, {-Z, X, 0.0}, {Z, -X, 0.0}, {-Z, -X, 0.0}
};
static GLint tindices[20][3] = {
{0,4,1}, {0,9,4}, {9,5,4}, {4,5,8}, {4,8,1},
{8,10,1}, {8,3,10}, {5,3,8}, {5,2,3}, {2,7,3},
{7,10,3}, {7,6,10}, {7,11,6}, {11,0,6}, {0,1,6},
{6,1,10}, {9,0,11}, {9,11,2}, {9,2,5}, {7,2,11} };
for (i = 0; i < 20; i++) {
/* color information here */

for (j = 0; j < 3; j++) {
d1[j] = vdata[tindices[i][0]][j] - vdata[tindices[i][1]][j];
d2[j] = vdata[tindices[i][1]][j] - vdata[tindices[i][2]][j];
}
normcrossprod(d1, d2, norm);
glNormal3fv(norm);
glBegin(GL_TRIANGLES);
glVertex3fv(&vdata[tindices[i][0]][0]);
glVertex3fv(&vdata[tindices[i][1]][0]);
glVertex3fv(&vdata[tindices[i][2]][0]);
glEnd();
}
glFlush();

   Sleep(3000);
   return 0;
}

#include <GL/gl.h>
#include <GL/glaux.h>

int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-8.0, 8.0, -8.0, 8.0, -1.0, 1.0);
   
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
   glBegin(GL_LINES);
      glVertex2f(-10.0, 0.0);
      glVertex2f(10.0, 0.0);
      glVertex2f(0.0, -10.0);
      glVertex2f(0.0, 10.0);
      glEnd();
    glDisable(GL_LINE_STIPPLE);
   glLineWidth(5);
    glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
      glVertex2f(1.0, 3.0);
    glEnd();
    
    glMatrixMode(GL_MODELVIEW);  
    glLoadIdentity(); //I 
      
    glEnable(GL_LINE_STIPPLE); /* dashed lines */
    glLineStipple(1, 0xF0F0);
    glScalef(-1.0, 1.0, 1.0);//[Ref]
    glPushMatrix();
     glTranslatef(3.0, 2.0, 0.0);//[Ref][Tr(3,2)]
    glPushMatrix();   
     glTranslatef(2.0, 2.0, 0.0);//[Ref][Tr(3,2)][Tr(2,2)]
    glPushMatrix(); 
     glLoadIdentity(); //I
     glScalef(2.0, 2.0, 1.0);//[Sc]
    glPushMatrix(); 
     glTranslatef(-2.0, -2.0, 0.0);////[Sc][Tr(-2,-2)]
   // glPopMatrix();
   // glPopMatrix();
   // glPopMatrix();
    glPopMatrix();
    glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
      glVertex2f(1.0, 3.0);
    glEnd();
  
  

   glFlush();

   Sleep(9000);
   return 0;
}

#include <GL/gl.h>
#include <GL/glaux.h>

int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (800, 400, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-8.0, 8.0, -8.0, 8.0, -1.0, 1.0);
   
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
   glBegin(GL_LINES);
      glVertex2f(-10.0, 0.0);
      glVertex2f(10.0, 0.0);
      glVertex2f(0.0, -10.0);
      glVertex2f(0.0, 10.0);
      glEnd();
    glDisable(GL_LINE_STIPPLE);
   glLineWidth(5);
   glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
      glVertex2f(1.0, 3.0);
   glEnd();
    
    glMatrixMode(GL_MODELVIEW);  
     glLoadIdentity(); //I 
      
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
   
    glScalef(-1.0, 1.0, 1.0);//[Ref]
    glPushMatrix();
    glTranslatef(2.0, 3.0, 0.0);//[Ref][Tr(2,3)]
    glPushMatrix();
    glTranslatef(2.0, 2.0, 0.0);//[Ref][Tr(2,3)][Tr(2,2)]
    glPopMatrix();//[Ref][Tr(2,3)]
    glPushMatrix();
    glScalef(2.0, 2.0, 1.0);//[Ref][Tr(2,3)][Sc]
    glTranslatef(-2.0, -2.0, 0.0);//[Ref][Tr(2,3)][Sc][Tr(-2,-2)]
    glLoadIdentity();
    glPopMatrix();
    glPopMatrix();
   glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
      glVertex2f(1.0, 3.0);
   glEnd();
  

   glFlush();

   Sleep(9000);
   return 0;
}


#include <GL/gl.h>
#include <GL/glaux.h>

int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-5.0, 5.0, -5.0, 5.0, -5.0, 5.0);
    glPolygonMode(GL_FRONT, GL_LINE);
   glPolygonMode(GL_BACK, GL_LINE);
   glBegin(GL_TRIANGLES);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(2.0, 2.5);
      glEnd();
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
   glLoadIdentity();
      glOrtho(-5.0, 5.0, -5.0, 5.0, -5.0, 5.0);
   glTranslatef(-2.0, 0.0, 0.0);
glBegin(GL_TRIANGLES);
      glVertex3f(1.0, 1.0, 1.0);
      glVertex3f(3.0, 1.0, 1.0);
      glVertex3f(2.0, 2.5, 1.0);
      glEnd();
  
  glLineStipple(1, 0xF00F); /*long dashed lines */
glLoadIdentity();
 glOrtho(-5.0, 5.0, -5.0, 5.0, -5.0, 5.0);
glScalef(1.5, 0.5, 1.0);
glBegin(GL_TRIANGLES);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(2.0, 2.5);
      glEnd();   
    
    glLineStipple(1, 0x8888); /* dotted lines */
glLoadIdentity();
glOrtho(-5.0, 5.0, -5.0, 5.0, -5.0, 5.0);
glRotatef (90.0, 1.0, 1.0, 1.0);
    glBegin(GL_TRIANGLES);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(2.0, 2.5);
      glEnd();   
      
   glFlush();

   Sleep(3000);
   return 0;
}

#include <GL/gl.h>
#include <GL/glaux.h>

int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-6.0, 6.0, -6.0, 6.0, -5.0, 5.0);
   
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
   glBegin(GL_LINES);
      glVertex2f(-10.0, 0.0);
      glVertex2f(10.0, 0.0);
      glVertex2f(0.0, -10.0);
      glVertex2f(0.0, 10.0);
      glEnd();
    glDisable(GL_LINE_STIPPLE);
   
   glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
      glEnd();
    
    glMatrixMode(GL_MODELVIEW);  
     glLoadIdentity();  
      
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
       glScalef(1.0, -1.0, 1.0);
     glTranslatef(3.0, 1.0, 0.0);
     glScalef(3.0, 2.0, 1.0);
     glTranslatef(-3.0, -1.0, 0.0);
     glTranslatef(2.0, 2.0, 0.0);
     glRotatef (180.0, 0.0, 0.0, 1.0);
     glTranslatef(-2.0, -2.0, 0.0);
   glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
      glEnd();
    
  

   glFlush();

   Sleep(9000);
   return 0;
}

#include <GL/gl.h>
#include <GL/glaux.h>

int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (800, 400, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(-6.0, 6.0, -6.0, 6.0, -5.0, 5.0);
   
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
   glBegin(GL_LINES);
      glVertex2f(-10.0, 0.0);
      glVertex2f(10.0, 0.0);
      glVertex2f(0.0, -10.0);
      glVertex2f(0.0, 10.0);
      glEnd();
    glDisable(GL_LINE_STIPPLE);
   glLineWidth(5);
   glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
      glEnd();
    
    glMatrixMode(GL_MODELVIEW);  
     glLoadIdentity(); //I 
      
   glEnable(GL_LINE_STIPPLE); /* dashed lines */
   glLineStipple(1, 0xF0F0);
     glScalef(1.0, -1.0, 1.0);//[Ref]
     glPushMatrix();
     glTranslatef(3.0, 1.0, 0.0); //[Ref][Tr(3,1)]
     glPushMatrix();
     glScalef(3.0, 2.0, 1.0); //[Ref][Tr(3,1)][Sc]
     glTranslatef(-3.0, -1.0, 0.0);//[Ref][Tr(3,1)][Sc][Tr(-3,-1)]
     glTranslatef(2.0, 2.0, 0.0);//[Ref][Tr(3,1)][Sc][Tr(-3,-1)][Tr(2,2)]
     glRotatef (180.0, 0.0, 0.0, 1.0);//[Ref][Tr(3,1)][Sc][Tr(-3,-1)][Tr(2,2)][Ro]
     glTranslatef(-2.0, -2.0, 0.0);//[Ref][Tr(3,1)][Sc][Tr(-3,-1)][Tr(2,2)][Ro][Tr(-2,-2)]
   glPopMatrix();
   glPopMatrix();
   glLoadIdentity(); //I 
   glBegin(GL_LINE_LOOP);
      glVertex2f(1.0, 1.0);
      glVertex2f(3.0, 1.0);
      glVertex2f(3.0, 3.0);
   glEnd();
    
  

   glFlush();

   Sleep(9000);
   return 0;
}
#include <GL/gl.h>
#include <GL/glaux.h>

GLuint listName = 1;
void myinit (void)
{
glNewList (listName, GL_COMPILE);
glColor3f(1.0, 0.0, 0.0);
glBegin (GL_TRIANGLES);
glVertex2f (0.0, 0.0);
glVertex2f (1.0, 0.0);
glVertex2f (0.0, 1.0);
glEnd ();
glTranslatef (1.5, 0.0, 0.0);
glEndList ();
glShadeModel (GL_FLAT);
}
void drawLine (void)
{
glBegin (GL_LINES);
glVertex2f (0.0, 0.5);
glVertex2f (15.0, 0.5);
glEnd ();
}
void CALLBACK display(void)
{
GLuint i;
glClear (GL_COLOR_BUFFER_BIT);
glColor3f(0.0, 1.0, 0.0);
for (i = 0; i < 10; i++)
glCallList (listName);
drawLine ();
glFlush ();
}
void CALLBACK myReshape(GLsizei w, GLsizei h)
{
glViewport(0, 0, w, h);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
/*if (w <= h)
gluOrtho2D (0.0, 2.0, -0.5 * (GLfloat) h/(GLfloat) w,
1.5 * (GLfloat) h/(GLfloat) w);
else
gluOrtho2D (0.0, 2.0 * (GLfloat) w/(GLfloat) h, -0.5,
1.5);*/
glOrtho(-5.0, 5.0, -5.0, 5.0, -5.0, 5.0);
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
}
int main(int argc, char** argv)
{
auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
auxInitPosition (0, 0, 400, 50);
auxInitWindow (argv[0]);
myinit ();
auxReshapeFunc (myReshape);
auxMainLoop(display);
   Sleep(3000);
   return 0;
}


#include <GL/gl.h>
#include <GL/glaux.h>
void drawTriangle();
int main(int argc, char** argv)
{
   auxInitDisplayMode (AUX_SINGLE | AUX_RGBA);
   auxInitPosition (0, 0, 500, 500);
   auxInitWindow (argv[0]);

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1.0, 1.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
    //glOrtho(left, right, bottom, top, zNear, zFar);
    glOrtho(-8.0, 8.0, -8.0, 8.0, -8.0, 8.0);
   
    //	KOORDİNAT SİSTEMİ
    glBegin(GL_LINES);   
      glVertex2f(-10.0,0.0);
      glVertex2f(10.0,0.0);
      glVertex2f(0.0,-10.0);
      glVertex2f(0.0,10.0);
    glEnd();
   
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    /*
//-20 br öteleme
   glLoadIdentity();
   glLineStipple(1,0xF0F0);
   glColor3f(1.0, 0.0, 1.0);//mor
   glTranslatef(-2.0,0.0,0.0);
   drawTriangle();
   //ölçek
     glLoadIdentity();
      glEnable(GL_LINE_STIPPLE);
   glLineStipple(1,0xF0F0);
   glColor3f(0.0, 0.0, 1.0);//laci
   glScalef(1.5,0.5,0.0);
   glLineStipple(1,0xF0F0);
   glTranslatef(-2.0,0.0,0.0);
   drawTriangle();
   */
   //ROTATE
   
//   glLoadIdentity();
 //  glColor3f(1.0, 0.0, 0.0);
   glLineStipple(1,0xF0F0);
   glRotatef(90.0,0.0,0.0,1.0);  
   glScalef(1.5,0.5,0.0);
  // glLineStipple(1,0xF0F0);
   glTranslatef(-2.0,0.0,0.0);
  // drawTriangle();
  
   
   //Normal Üçgen 
  // glLoadIdentity();
   glColor3f(1.0, 1.0, 1.0);//beyaz
     
   drawTriangle();
  
  
   glFlush();
   Sleep(3000);
   return 0;
}

void drawTriangle(){
	glEnable(GL_LINE_STIPPLE);
   glLineStipple(1,0xF0F0);
   glBegin(GL_LINE_LOOP); 
     glVertex2f(2.0,2.0);
     glVertex2f(4.0,2.0);
     glVertex2f(3.0,5.0);
   glEnd();
}

